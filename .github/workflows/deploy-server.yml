name: Deploy server to EC2

on:
  push:
    branches: [ main ]
    paths:
      - 'server/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install rsync and ssh client
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync openssh-client

      - name: Setup SSH
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Add host key to known_hosts (avoids requiring an extra secret)
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts
          # Test connection (non-fatal)
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes "$SSH_USER@$SSH_HOST" 'echo connected'

      - name: Upload .env (optional)
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          ENV_FILE: ${{ secrets.ENV_FILE }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          if [ -n "${ENV_FILE}" ]; then
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes "$SSH_USER@$SSH_HOST" "mkdir -p /opt/riding-course/server"
            printf "%s\n" "$ENV_FILE" | ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes "$SSH_USER@$SSH_HOST" 'cat > /opt/riding-course/server/.env'
            echo ".env uploaded"
          elif [ -n "${DATABASE_URL}" ] || [ -n "${DB_HOST}${DB_USER}${DB_NAME}" ]; then
            echo "Composing .env from secrets and uploading"
            TMP_ENV_CONTENT=""
            if [ -n "${DATABASE_URL}" ]; then
              TMP_ENV_CONTENT="DATABASE_URL=${DATABASE_URL}"
            else
              : "${DB_HOST:=127.0.0.1}"
              : "${DB_PORT:=3306}"
              : "${DB_USER:=app}"
              : "${DB_PASS:=}"
              : "${DB_NAME:=riding_course}"
              TMP_ENV_CONTENT=$(printf "DB_HOST=%s\nDB_PORT=%s\nDB_USER=%s\nDB_PASS=%s\nDB_NAME=%s\n" "${DB_HOST}" "${DB_PORT}" "${DB_USER}" "${DB_PASS}" "${DB_NAME}")
            fi
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes "$SSH_USER@$SSH_HOST" "mkdir -p /opt/riding-course/server"
            printf "%s\n" "$TMP_ENV_CONTENT" | ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes "$SSH_USER@$SSH_HOST" 'cat > /opt/riding-course/server/.env'
            echo ".env composed and uploaded"
          else
            echo "ENV_FILE secret not set; skipping .env upload"
          fi

      - name: Rsync server code
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          rsync -az --delete -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes" server/ "$SSH_USER@$SSH_HOST:/opt/riding-course/server/"

      - name: Install deps, migrate, restart service
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes "$SSH_USER@$SSH_HOST" << 'REMOTE'
          set -e
          cd /opt/riding-course/server
          python3 -m venv .venv
          . .venv/bin/activate
          pip install -U pip wheel
          pip install -r requirements.txt
          .venv/bin/alembic upgrade head
          sudo systemctl restart riding-course
          systemctl is-active --quiet riding-course && echo "Service running"
          REMOTE


