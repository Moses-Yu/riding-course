{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#riding-course","title":"Riding Course","text":"<p>Share and browse great riding routes by pasting a Naver Map share link. Community features include photos, comments, likes, and bookmarks.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Development setup: development.md</li> <li>Architecture: architecture.md</li> <li>Backend and data model: backend.md</li> <li>API reference: api.md</li> <li>Client (Expo) guide: client.md</li> <li>Deployment: deployment.md</li> <li>Security notes: security.md</li> </ul>"},{"location":"api/","title":"API","text":""},{"location":"api/#api-reference","title":"API reference","text":"<p>Base URL: <code>/api</code></p> <p>Authentication - Minimal cookie token set by <code>POST /auth/login</code> - Send credentials with <code>fetch(..., { credentials: 'include' })</code> from browsers/Expo Web</p>"},{"location":"api/#routes","title":"Routes","text":"<ul> <li>POST <code>/routes/parse</code> \u2192 <code>RouteNormalized</code></li> <li> <p>Body: <code>{ \"raw\": string }</code> (JSON or form)</p> </li> <li> <p>POST <code>/routes</code> \u2192 <code>RouteOut</code></p> </li> <li> <p>JSON body: <code>RouteCreate</code></p> </li> <li> <p>POST <code>/routes/with-photos</code> \u2192 <code>RouteOut</code></p> </li> <li> <p>multipart/form-data fields:</p> <ul> <li><code>title</code> (required), <code>summary?</code>, <code>open_url</code> (required), <code>nmap_url?</code>, <code>stars_scenery?</code>, <code>stars_difficulty?</code>, <code>tags_bitmask?</code></li> <li><code>points?</code>: JSON string of <code>Waypoint[]</code> (start, waypoints, dest order)</li> <li><code>photos</code>: one or more files</li> </ul> </li> <li> <p>GET <code>/routes?region1=&amp;tag=&amp;sort=popular|comments|latest|opens</code> \u2192 <code>RouteOut[]</code></p> </li> <li> <p>GET <code>/routes/{id}</code> \u2192 <code>RouteOut</code></p> </li> <li> <p>GET <code>/routes/{id}/photos</code> \u2192 <code>{ id, url, created_at? }[]</code></p> </li> <li> <p>POST <code>/routes/{id}/open-track</code> \u2192 <code>{ ok: true }</code></p> </li> <li> <p>Body (optional): <code>{ userAgent?, referrer?, platform? }</code></p> </li> <li> <p>POST <code>/routes/{id}/like</code> \u2192 <code>RouteOut</code> (auth)</p> </li> <li>POST <code>/routes/{id}/unlike</code> \u2192 <code>RouteOut</code> (auth)</li> <li> <p>GET <code>/routes/{id}/liked</code> \u2192 <code>{ liked: boolean }</code> (auth)</p> </li> <li> <p>GET <code>/routes/mine</code> \u2192 <code>RouteOut[]</code> (auth)</p> </li> <li> <p>PATCH <code>/routes/{id}</code> \u2192 <code>RouteOut</code> (auth; only author)</p> </li> <li>JSON body: <code>RouteUpdate</code></li> </ul>"},{"location":"api/#comments","title":"Comments","text":"<ul> <li>GET <code>/comments/route/{routeId}?sort=recent|likes</code> \u2192 <code>CommentOut[]</code></li> <li>POST <code>/comments/route/{routeId}</code> \u2192 <code>CommentOut</code> (auth)</li> <li>GET <code>/comments/{commentId}/liked</code> \u2192 <code>{ liked: boolean }</code> (auth)</li> <li>POST <code>/comments/{commentId}/like</code> \u2192 <code>{ ok: true }</code> (auth)</li> <li>POST <code>/comments/{commentId}/unlike</code> \u2192 <code>{ ok: true }</code> (auth)</li> </ul>"},{"location":"api/#bookmarks","title":"Bookmarks","text":"<ul> <li>POST <code>/bookmarks/route/{routeId}</code> \u2192 <code>{ ok: true }</code> (auth)</li> <li>DELETE <code>/bookmarks/route/{routeId}</code> \u2192 <code>{ ok: true }</code> (auth)</li> <li>GET <code>/bookmarks/</code> \u2192 <code>RouteOut[]</code> (auth)</li> <li>GET <code>/bookmarks/route/{routeId}</code> \u2192 <code>{ bookmarked: boolean }</code> (auth)</li> </ul>"},{"location":"api/#auth","title":"Auth","text":"<ul> <li>POST <code>/auth/register</code> \u2192 <code>UserOut</code></li> <li><code>{ email, password, display_name? }</code></li> <li>POST <code>/auth/login</code> \u2192 <code>{ ok: true }</code> (sets httpOnly cookie)</li> <li>POST <code>/auth/logout</code> \u2192 <code>{ ok: true }</code> (clears cookie)</li> <li>GET <code>/auth/me</code> \u2192 <code>UserOut</code> (auth)</li> </ul>"},{"location":"api/#reports","title":"Reports","text":"<ul> <li>POST <code>/reports/route/{routeId}</code> \u2192 <code>{ ok: true }</code></li> <li><code>{ reason: string, detail?: string }</code></li> <li>POST <code>/reports/comment/{commentId}</code> \u2192 <code>{ ok: true }</code></li> <li><code>{ reason: string, detail?: string }</code></li> </ul>"},{"location":"api/#data-contracts-selected","title":"Data contracts (selected)","text":"<ul> <li><code>RouteCreate</code></li> </ul> <pre><code>{\n  \"title\": \"string\",\n  \"summary\": \"string?\",\n  \"region1\": \"string?\",\n  \"region2\": \"string?\",\n  \"length_km\": number?,\n  \"duration_min\": number?,\n  \"stars_scenery\": number?,\n  \"stars_difficulty\": number?,\n  \"surface\": \"string?\",\n  \"traffic\": \"string?\",\n  \"speedbump\": number?,\n  \"enforcement\": number?,\n  \"signal\": number?,\n  \"tags_bitmask\": number?,\n  \"open_url\": \"string\",\n  \"nmap_url\": \"string?\",\n  \"points\": [{ \"lat\": number, \"lng\": number, \"name?\": \"string\" }]?\n}\n</code></pre>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#architecture","title":"Architecture","text":""},{"location":"architecture/#high-level","title":"High-level","text":"<ul> <li>Client: Expo (React Native + Web) using <code>expo-router</code></li> <li>Server: FastAPI with SQLAlchemy 2.0, Alembic migrations, MySQL (asyncmy)</li> <li>Auth: HMAC-signed token in an HTTP-only cookie</li> <li>Storage: Local <code>uploads/</code> directory for route photos (mounted via FastAPI StaticFiles in dev)</li> </ul>"},{"location":"architecture/#repository-structure","title":"Repository structure","text":"<ul> <li><code>client/</code>: Expo app screens and components</li> <li><code>server/</code>: FastAPI app, Alembic, models, routers, services, tests</li> </ul>"},{"location":"architecture/#user-flow","title":"User flow","text":"<ol> <li>User creates a directions link in Naver Map and copies it</li> <li>In the app, user pastes the link; the server parses and normalizes it</li> <li>User adds title, optional summary/tags/ratings/photos, and saves the route</li> <li>Other users can view route details, open in Naver Map, comment, like, and bookmark</li> </ol>"},{"location":"architecture/#important-paths","title":"Important paths","text":"<ul> <li>Client screens: <code>client/app/index.tsx</code>, <code>route-create.tsx</code>, <code>route-detail.tsx</code>, <code>route-edit.tsx</code>, <code>my.tsx</code>, <code>register.tsx</code></li> <li>Backend routers: <code>server/app/routers/{routes,comments,bookmarks,auth,reports}.py</code></li> <li>Data models: <code>server/app/db/models.py</code></li> <li>Parser: <code>server/app/services/parser.py</code></li> <li>App wiring: <code>server/app/main.py</code>, <code>server/app/core/config.py</code></li> </ul>"},{"location":"architecture/#parser-strategy-naver-map","title":"Parser strategy (Naver Map)","text":"<p>Accepted inputs: - <code>nmap://route/{modality}?...</code> - <code>intent://route/{modality}?...#Intent;scheme=nmap;...</code> - <code>https://map.naver.com/(v5|p)/directions/...</code> best-effort coordinate extraction - <code>https://naver.me/...</code> shortlink expansion where possible</p> <p>Normalization result aligns with <code>RouteNormalized</code> in <code>server/app/schemas.py</code>.</p>"},{"location":"backend/","title":"Backend","text":""},{"location":"backend/#backend-and-data-model","title":"Backend and data model","text":""},{"location":"backend/#configuration","title":"Configuration","text":"<p><code>server/app/core/config.py</code> - <code>app_name</code>: app title - <code>api_prefix</code>: <code>/api</code> - <code>database_url</code>: MySQL async DSN - <code>cors_origins</code>: allowed origins (dev)</p> <p>Auth-related env vars consumed by routers/auth and core/auth: - <code>AUTH_SECRET</code>: HMAC signing key for tokens - <code>AUTH_COOKIE_DOMAIN</code>, <code>AUTH_COOKIE_SECURE</code></p>"},{"location":"backend/#database-models-sqlalchemy","title":"Database models (SQLAlchemy)","text":"<p><code>server/app/db/models.py</code> - <code>Route</code>: route metadata and counters (likes/comments) - <code>RoutePoint</code>: sequenced points for start/waypoints/destination - <code>Comment</code>, <code>CommentLike</code>: comments and likes on comments - <code>Bookmark</code>: user bookmarks for routes - <code>RouteOpenEvent</code>: open tracking for \u201copen in Naver Map\u201d - <code>Like</code>: user likes on routes - <code>RoutePhoto</code>: photo URLs for a route - <code>User</code>: minimal user table (email, password_hash, display_name) - <code>Report</code>: report records for routes/comments</p> <p>Notes - <code>tags_bitmask</code> encodes up to 64 boolean tags - <code>Route.has_photos</code> convenience property for clients</p>"},{"location":"backend/#pydantic-schemas","title":"Pydantic schemas","text":"<p><code>server/app/schemas.py</code> - <code>Waypoint</code>, <code>RouteNormalized</code>, <code>RouteCreate</code>, <code>RouteUpdate</code>, <code>RouteOut</code> - <code>CommentCreate</code>, <code>CommentOut</code> - <code>RegisterIn</code>, <code>LoginIn</code>, <code>UserOut</code> - <code>ReportCreate</code></p>"},{"location":"backend/#parser-service","title":"Parser service","text":"<p><code>server/app/services/parser.py</code> - Accepts Naver Map share links (<code>nmap://</code>, <code>intent://</code>, web URLs, shortlinks) - Produces normalized structure for modality, start/waypoints/dest, and canonical <code>nmap://</code> when possible - Best-effort fallbacks ensure the original URL can still be opened even when coordinates can\u2019t be extracted</p>"},{"location":"backend/#app-initialization","title":"App initialization","text":"<p><code>server/app/main.py</code> - CORS configured from <code>settings.cors_origins</code> - Routers mounted under <code>settings.api_prefix</code> (<code>/api</code>) - Static mount for local <code>uploads/</code></p>"},{"location":"backend/#database-sessions","title":"Database sessions","text":"<p><code>server/app/db/session.py</code> - Async engine and session factory using <code>asyncmy</code> - Dependency <code>get_db()</code> yields an <code>AsyncSession</code></p>"},{"location":"client/","title":"Client","text":""},{"location":"client/#client-expo-guide","title":"Client (Expo) guide","text":""},{"location":"client/#tech","title":"Tech","text":"<ul> <li>Expo SDK 53, <code>expo-router</code></li> <li>React 19, React Native 0.79</li> </ul>"},{"location":"client/#scripts","title":"Scripts","text":"<p><code>client/package.json</code> - <code>dev</code>: start Expo - <code>android</code>, <code>ios</code>: build/run native projects - <code>web</code>: run web target</p>"},{"location":"client/#screens","title":"Screens","text":"<ul> <li><code>app/index.tsx</code>: Home list with region filter and sort modes</li> <li><code>app/route-create.tsx</code>: Paste Naver link, preview parsed data, add ratings/tags/photos, save</li> <li><code>app/route-detail.tsx</code>: Show details, likes/bookmarks, comments, photos, reports, open in Naver Map</li> <li><code>app/route-edit.tsx</code>: Edit own route</li> <li><code>app/my.tsx</code>: Login/logout, bookmarks, my routes</li> <li><code>app/register.tsx</code>: Registration with optional motorcycle preference UI</li> <li>Layout/navigation: <code>app/_layout.tsx</code></li> </ul>"},{"location":"client/#environment-variable","title":"Environment variable","text":"<ul> <li><code>EXPO_PUBLIC_API_BASE</code> (e.g., <code>http://127.0.0.1:8080/api</code>)</li> <li>Defaults to the local dev URL when not set</li> </ul>"},{"location":"client/#accessibilityux-notes","title":"Accessibility/UX notes","text":"<ul> <li>Large tap targets and clear feedback</li> <li>Optimistic updates for likes/comments</li> <li>Web-friendly shadows and responsive layout</li> </ul>"},{"location":"deployment/","title":"Deployment","text":""},{"location":"deployment/#deployment","title":"Deployment","text":""},{"location":"deployment/#backend","title":"Backend","text":"<ul> <li>Provision MySQL 8 and set <code>DATABASE_URL</code></li> <li>Set <code>AUTH_SECRET</code> (long random string)</li> <li>Optional: <code>AUTH_COOKIE_DOMAIN</code>, <code>AUTH_COOKIE_SECURE=true</code> (when using HTTPS and a real domain)</li> <li>Apply Alembic migrations: <code>alembic upgrade head</code></li> <li>Run with a production server (e.g., <code>uvicorn</code> behind Nginx)</li> </ul> <p>Nginx (example)</p> <pre><code>location /api/ {\n  proxy_pass http://127.0.0.1:8080/api/;\n  proxy_set_header Host $host;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n  proxy_set_header X-Forwarded-Proto $scheme;\n}\n\nlocation /uploads/ {\n  alias /path/to/riding-course/server/uploads/;\n  autoindex off;\n}\n</code></pre>"},{"location":"deployment/#client-web-or-native","title":"Client (web or native)","text":"<ul> <li>Web: host via Expo web or a static host; point it at your API base via <code>EXPO_PUBLIC_API_BASE</code></li> <li>Native: build with EAS or local builds; ensure deep link opening of <code>nmap://</code> works per platform constraints</li> </ul>"},{"location":"deployment/#assetsuploads","title":"Assets/uploads","text":"<ul> <li>In dev, the server mounts <code>uploads/</code> as static. For production, consider object storage (S3 + CloudFront) and signed uploads.</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/#development-setup","title":"Development setup","text":""},{"location":"development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12+</li> <li>Node.js 18+ and npm</li> <li>Docker (for local MySQL) or a running MySQL 8 instance</li> </ul>"},{"location":"development/#backend-fastapi","title":"Backend (FastAPI)","text":"<p>Paths below assume project root at <code>/Users/moses/Side Project/riding-course</code>.</p> <p>1) Create server/.env</p> <pre><code>DATABASE_URL=mysql+asyncmy://root:password@127.0.0.1:3306/riding_course\nAUTH_SECRET=change-me\n# Optional cookie flags for production-like dev\n# AUTH_COOKIE_DOMAIN=localhost\n# AUTH_COOKIE_SECURE=false\n</code></pre> <p>2) Start MySQL (Docker)</p> <pre><code>docker run --name mysql-riding -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=riding_course -p 3306:3306 -d mysql:8.0\n</code></pre> <p>3) Create venv, install deps, and run migrations</p> <pre><code>cd \"/Users/moses/Side Project/riding-course/server\"\npython3 -m venv .venv &amp;&amp; source .venv/bin/activate\npip install -r requirements.txt\nalembic upgrade head\n</code></pre> <p>4) Run the API server</p> <pre><code>uvicorn app.main:app --reload --port 8080\n</code></pre> <p>The API base URL in dev is <code>http://127.0.0.1:8080/api</code>.</p>"},{"location":"development/#client-expo-react-native-web","title":"Client (Expo \u2013 React Native + Web)","text":"<p>1) Install dependencies</p> <pre><code>cd \"/Users/moses/Side Project/riding-course/client\"\nnpm install\n</code></pre> <p>2) Configure API base (optional) - The client reads <code>EXPO_PUBLIC_API_BASE</code>. If not set, it defaults to <code>http://127.0.0.1:8080/api</code>. - Example (Unix shell):</p> <pre><code>export EXPO_PUBLIC_API_BASE=http://127.0.0.1:8080/api\n</code></pre> <p>3) Start Expo</p> <pre><code>npm run dev\n</code></pre> <p>Open the app on web or a device/emulator. You can create a route by pasting a Naver Map share link.</p>"},{"location":"development/#running-tests","title":"Running tests","text":"<pre><code>cd \"/Users/moses/Side Project/riding-course/server\"\npytest -q\n</code></pre>"},{"location":"security/","title":"Security","text":""},{"location":"security/#security-notes","title":"Security notes","text":""},{"location":"security/#authentication","title":"Authentication","text":"<ul> <li>Cookie name: <code>rc_token</code></li> <li>Token: <code>userId:expires</code> HMAC-SHA256, base64url-encoded</li> <li>Env: <code>AUTH_SECRET</code> (HMAC key), <code>AUTH_COOKIE_DOMAIN</code>, <code>AUTH_COOKIE_SECURE</code></li> <li>Endpoints protected via <code>get_current_user</code> dependency</li> </ul>"},{"location":"security/#cors","title":"CORS","text":"<ul> <li>Origins are configured in <code>settings.cors_origins</code> (dev defaults provided). Adjust for production domains.</li> </ul>"},{"location":"security/#uploads","title":"Uploads","text":"<ul> <li>Currently stored to local <code>uploads/</code> with basic filename sanitization. Prefer object storage in production; validate image types/size limits.</li> </ul>"},{"location":"security/#rate-limiting-and-abuse","title":"Rate limiting and abuse","text":"<ul> <li>Consider adding reverse-proxy rate limiting on auth and parse endpoints.</li> </ul>"},{"location":"security/#sensitive-config","title":"Sensitive config","text":"<ul> <li>Store secrets in environment variables or a secrets manager. Never commit real secrets.</li> </ul>"}]}